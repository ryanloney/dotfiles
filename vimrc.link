" Notes and Modeline {{
"   vim: set fo-=or colorcolumn=100
"   Tips compiled from
"   http://items.sjbach.com/319/configuring-vim-right
"   http://stevelosh.com/blog/2010/09/coming-home-to-vim/
"   http://github.com/holman/dotfiles
"   http://vi-improved.org/vimrc.html
"   and what I remember from 1986 CSC 101 at Cal Poly on Pyramid timeshare
"   http://peox.net/articles/vimconfig.html
"   Also: https://github.com/holman/dotfiles/blob/master/vim/vimrc.symlink
"   Also: Annoying vim features: http://www.jrwz.net/technical/vi/mytips.html
"   Don't use the bare *map feature: http://bit.ly/YMAHNv
" }}
"
" Basics {{
    set nocompatible                " be iMproved
    syntax on                       " Enable syntax highlighting
    let mapleader = ","             " Our free key to prefix custom commands
    let localleader = "\\"
    set hidden                      " switch buffers w/o saving
    set encoding=utf-8
	set shell=/bin/sh
" }}

" Vundle {{
    filetype off                    " Required first for Bundles to work
    set rtp+=~/.vim/bundle/vundle
    call vundle#rc()
    Bundle 'gmarik/vundle'
" }}

" General {{
    set nobackup                    " don't let vim backup files
    set noswapfile
    set nowritebackup               " And again.
    set autochdir                   " always switch to current dir
    set backspace=indent,eol,start  " Intuitive backspacing.
    set backupdir=~/.vim/backup
    set clipboard=unnamed           " Copy goes to system in 7.3
    set hlsearch                    " Highlight searches <leader>/ turns off
    set wildmode=list:longest       " Complete files like a shell.
    set modeline
    set noerrorbells                " No beeping!
    set showcmd                     " Display incomplete commands.
    set visualbell                  " No flashing either.
    set wildignore=*.jpg,*.gif,*.png,*.git,*.gem,*.zip,*.tar.gz
    set wildmenu                    " Enhanced command line completion.

    " After searching with /, hitting <leader>/ toggles highlight
    nnoremap <silent> <leader>/ :set hlsearch! hlsearch?<CR>
" }}

" UI {{
    let loaded_matchparen = 1       " Just use % instead of auto paren matching
    set colorcolumn=80              " vertical line at 80 cols
    set nostartofline               " Searches leave cursor on same column
    set ignorecase                  " Case-insensitive searching.
    set incsearch                   " Highlight matches as you type.
    set lazyredraw                  " No redraw during macro execution
    set number                      " Show line numbers.
    set ruler                       " Show cursor position.
    set shortmess=atI               " stifle the long interrupt prompts
    set showmode                    " Display the mode you're in.
    set smartcase                   " But case-sensitive if has caps
    set scrolloff=3                 " Show 3 lines around cursor (more context)
"    set laststatus=2                " Show the status line all the time
"    set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]

    set title                       " Set the terminal's title
    let &titleold=getcwd()          " Show CWD instead of "Thx for Flying VIM"
" }}


" Indenting and tabs {{
    set autoindent          " auto indent new lines
    set smartindent         " be smart about it
    set nowrap              " do not wrap lines please
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4        " no clue what this does
    set shiftround          " if spaces, TAB maps to right spot


    " set fo+=c             " Auto-wrap comments, inserting comment leader
    " set fo+=t               " Auto-wrap text using textwidth
    " set fo-=r               " Do not auto insert a comment leader after <Enter>
    " set fo-=n

    " Necessary for previous 4 lines http://goo.gl/bxpIO
    " au BufNewFile,BufRead * setlocal formatoptions=cqnt

    nmap <leader>1 :set et<cr>:retab<cr>
    nmap <leader>2 :set noet<cr>:retab!<cr>

    set pastetoggle=<F2>            " --INSERT (paste)-- means safe for formatted text
" }}

" Folding {{
    set foldenable                  " turn on folding
    set foldmarker={{,}}            " fold on a single brace
    set foldmethod=marker           " fold on the marker above
    set foldlevel=100               " don't autofold anything
    set foldopen=block,hor,tag      " what movements open folds
    set foldopen+=percent,mark
    set foldopen+=quickfix""{{

    inoremap <F9> <C-O>za
    noremap <F9> za
    vnoremap <space> zf             " wrap a visual block with a fold
    nnoremap <space> za             " toggle fold with space
    noremap <leader>f za

    nnoremap <F10> :silent call ToggleFold()<CR>
    nnoremap <leader>fc zM          " close all folds
    nnoremap <leader>fo zR          " open all folds

    nnoremap gb <C-o>

    " From https://github.com/vim-scripts/Efficient-python-folding
    let b:folded = 1
    function! ToggleFold()
        if( b:folded == 0 )
            exec "normal! zM"
            let b:folded = 1
        else
            exec "normal! zR"
            let b:folded =0
        endif
    endfunction

    function! SimpleFoldText() 
        return getline(v:foldstart).' '
    endfunction " }
    set foldtext=SimpleFoldText()
" }}

" Buffer Management {{

    nnoremap L :bnext<CR>
    nnoremap H :bprev<CR>

    nnoremap <silent> <S-Up> :wincmd k<CR>
    nnoremap <silent> <S-Down> :wincmd j<CR>
    nnoremap <silent> <S-Left> :wincmd h<CR>
    nnoremap <silent> <S-Right> :wincmd l<CR>

" }}

" Mapping {{

    " Make it easier to (make it easier to (make it easier to (edit text)))
    nnoremap <leader>vi :split $MYVIMRC<cr>
    nnoremap <leader>vs :source $MYVIMRC<cr>

    " Semicolon for command mode is quicker than colon
    nnoremap ; :

    " Two quick jk exits insert mode (odd, I know)
    inoremap jk <Esc>

    " Q for formatting paragraph or selection
    vnoremap Q gq
    nnoremap Q gqap

    " Sane navigation for wrapped lines
    nnoremap j gj
    nnoremap k gk

    " I hit Capital K all the time
    noremap K <Esc>

    " ideas taken from Janus
    " toggle line wrapping modes
    nnoremap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

    :cnoremap Wq wq

    " <leader>r to open HTML file in browser  http://goo.gl/yJtG4
    au FileType html map <buffer> <leader>r :silent! ! open -g %<cr>:redraw!<cr>
    au FileType html map <buffer> <leader>R :silent! ! osascript -e 'tell app "Google Chrome" to tell the active tab of the first window to reload'<cr>:redraw!<cr>

    " Open current Markdown (*.md) file in OS X "Marked" and force redraw
    nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr> :redraw!<cr>

    nnoremap <leader>r gq}               " *r*eformat current paragraph

"    nmap <leader>r ggVGg?           " ROT13 is fun!

    " Show cursor column marker
    nnoremap <leader>c :set cursorcolumn!<CR>
    nnoremap <leader>l :set cursorline!<CR>
    hi CursorLine ctermbg=yellow ctermfg=white cterm=none
	
	" From http://vimcasts.org/episodes/show-invisibles/
	ab heart ❤

    " Show whitespace ¬ ¶
    nnoremap <leader>ws :set list!<CR>
    set listchars=""            " reset listchars
    set listchars+=eol:¬
	set listchars+=tab:▸\ 
	set listchars+=nbsp:_
    set listchars+=extends:»
    set listchars+=precedes:«
    " set listchars=eol:¬,tab:⧂⇥⇥»,trail:▫,nbsp:_
    
    " Runs the current line in the shell. Very dangerous.
    nnoremap <leader>; :.w !sh<CR>   

    " <leader>s is easier than :w<CR>
    nnoremap <leader>s :w<CR>

    " select all text in current buffer (like Command-A)
    noremap <leader>a ggVG

    nnoremap <C-j> <C-d>
    nnoremap <C-k> <C-u>

    nnoremap <leader>b <C-w>l

    " Indent and outdent now > and < keep the visual selection
    vnoremap > >gv
    vnoremap < <gv
    vnoremap <Tab> >gv
    vnoremap <S-Tab> <gv

    " Add the . command to visual mode
    vnoremap . :norm.<CR>

    " Auto-complete for keywords
    " imap <Tab> <C-N>
    inoremap <S-Tab> <C-P>

    " Execute buffer in Python 
    nnoremap <leader>p :w<CR>:!/usr/bin/env python % <CR>
" }}

" Skeleton files with todo templates {{
"use .vim/skel/template.html template for editing new files that match *.html
" au! BufNewFile * silent! 0r ~/.vim/skel/template.%:e

au! BufNewFile * call LoadTemplate() 
function! LoadTemplate() 
        silent! 0r ~/.vim/skel/template.%:e 
        " Highlight %VAR% placeholders with the Todo colour group 
        syn match Todo "%\u\+%" containedIn=ALL
endfunction 
" Jump between %VAR% placeholders in Insert mode with <Ctrl-p> 
inoremap <c-p> <ESC>/%\u.\{-1,}%<cr>c/%/
nnoremap <c-p> /%\u.\{-1,}%<cr>c/%/e<cr> 
" }}

" Filetypes {{
" Automatically insert line breaks in text files
" au BufEnter *.txt setl tx fo+=n2a linebreak

au BufNewFile,BufRead *.jade set filetype=jade 
au BufEnter *.py set ai sw=4 ts=4 sta et fo=croql
" }}

" Tabbed Windows {{
    noremap <leader>tt :tabnew<cr>
    noremap <leader>te :tabedit
    noremap <leader>tc :tabclose<cr>
    noremap <leader>to :tabonly<cr>
    noremap <leader>tn :tabnext<cr>
    noremap <leader>tp :tabprevious<cr>
    noremap <leader>tf :tabfirst<cr>
    noremap <leader>tl :tablast<cr>
    noremap <leader>tm :tabmove
" }}

" Bundles {{
    " http://stevelosh.com/blog/2010/09/coming-home-to-vim/#snipmate
    " http://nvie.com/posts/how-i-boosted-my-vim/

    Bundle 'tpope/vim-markdown'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-repeat'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'matchit.zip'
    Bundle 'digitaltoad/vim-jade'
    Bundle 'kchmck/vim-coffee-script'
    Bundle 'groenewege/vim-less'
    Bundle 'wavded/vim-stylus'
	
	" shows git diff marks in the gutter
    " Bundle 'airblade/vim-gitgutter'

    Bundle 'mattn/zencoding-vim'
    let g:user_zen_expandabbr_key = '<c-e>'

    Bundle 'scrooloose/nerdtree'
    " nnoremap <leader>nn :NERDTree<cr>

    Bundle 'jistr/vim-nerdtree-tabs'
    nnoremap <leader>n :NERDTreeTabsToggle<CR>

    " Uncomment to use Jamis Buck's file opening plugin
    "map <Leader>t :FuzzyFinderTextMate<Enter>

    " Bundle: git://github.com/scrooloose/nerdcommenter.git

    " Bundle: git://github.com/mileszs/ack.vim.git

    " Bundle: git://github.com/tpope/vim-fugitive.git
    " Bundle: git://github.com/tpope/vim-speeddating.git
    " Bundle: git://github.com/digitaltoad/vim-jade.git
    " Bundle: git://github.com/tpope/vim-commentary.git
    " Bundle: git://github.com/tpope/vim-unimpared.git
" }}

" Colors (solarized) {{
    let g:solarized_contrast="high"    
    let g:solarized_visibility="high"
    call togglebg#map("<leader>x")          " ,x toggles dark/light

    let profile = $ITERM_PROFILE
    if profile ==? 'solarized-dark'
        set background=dark                 " light | dark
        hi colorcolumn ctermbg=darkgrey 
    else
        set background=light
        hi colorcolumn ctermbg=lightgrey 
    endif
    colorscheme solarized
    "  Remove next line comment to force dark color scheme.
    "  Usually it's picked because iTerm2 will pass it in.
    " setenv ITERM_PROFILE solarized-dark
" }}

" Auto Commands autocmds {{

" Wrapping autocmd in a group per http://bit.ly/15wKRrM
augroup my_au
    autocmd!
    au FileType python setlocal noexpandtab

    " place this after Bundles have loaded
    " Set textwidth like a boss http://blog.ezyang.com/2010/03/vim-textwidth/
    filetype plugin indent on   
    au FileType, text,markdown setlocal textwidth=72

    au FileType stylus set ts=2|set shiftwidth=2|set expandtab
    au FileType jade set ts=2|set shiftwidth=2|set expandtab
    au FileType javascript set ts=4|set shiftwidth=4|set expandtab
    au FileType coffee setlocal ts=2 shiftwidth=2 shiftwidth=2 expandtab

    " Jump to the last position of the cursor
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif 
    " Turn off line wrapping when working on HTML files
    au BufNewFile,BufRead *.html setlocal nowrap
augroup END

"}}
